# Releng properties used by language/Cobol.groovy

#
# Comma separated list of required build properties for Cobol.groovy
cobol_requiredBuildProperties=cobol_srcPDS,cobol_cpyPDS,cobol_objPDS,cobol_loadPDS,\
  cobol_compiler,cobol_linkEditor,cobol_tempOptions,applicationOutputsCollectionName,\
  SDFHCOB,SDFHLOAD,SDSNLOAD,SCEELKED, \
  cobol_dependencySearch

#
# COBOL compiler name
cobol_compiler=IGYCRCTL

#
# linker name
cobol_linkEditor=IEWBLINK

#
# COBOL source data sets
cobol_srcPDS=${hlq}.COBOL
cobol_cpyPDS=${hlq}.COPY
cobol_objPDS=${hlq}.OBJ
cobol_dbrmPDS=${hlq}.DBRM
cobol_BMS_PDS=${team}.BMS.COPY

#
# data sets used to pass in external dependencies 
# both for compile and link steps 
cobol_import_cpyPDS=${hlq}.COPY.IMP
cobol_import_objPDS=${hlq}.OBJ.IMP

#
# COBOL load data sets
cobol_loadPDS=${hlq}.LOAD

#
# COBOL test case source data sets
cobol_testcase_srcPDS=${hlq}.TEST.COBOL

#
# COBOL test case load data sets
cobol_testcase_loadPDS=${hlq}.TEST.LOAD

#
# List the data sets that need to be created and their creation options
cobol_srcDatasets=${cobol_srcPDS},${cobol_cpyPDS},${cobol_objPDS},${cobol_dbrmPDS}
# When zAppBuild is enabled to resolve dependencies from external archives,
#  the datasets referenced by 'cobol_cpyImpPDS' and 'cobol_objImpPDS' need to be added to be created
# cobol_srcDatasets=${cobol_srcPDS},${cobol_cpyPDS},${cobol_objPDS},${cobol_dbrmPDS},${cobol_import_cpyPDS},${cobol_import_objPDS}

cobol_srcOptions=cyl space(1,1) lrecl(80) dsorg(PO) recfm(F,B) dsntype(library)

cobol_loadDatasets=${cobol_loadPDS}
cobol_loadOptions=cyl space(1,1) dsorg(PO) recfm(U) blksize(32760) dsntype(library)

cobol_tempOptions=cyl space(5,5) unit(vio) blksize(80) lrecl(80) recfm(f,b) new
cobol_printTempOptions=cyl space(5,5) unit(vio) blksize(133) lrecl(133) recfm(f,b) new


#
# List the data sets for tests that need to be created and their creation options
cobol_test_srcDatasets=${cobol_testcase_srcPDS}
cobol_test_srcOptions=cyl space(1,1) lrecl(80) dsorg(PO) recfm(F,B) dsntype(library)

cobol_test_loadDatasets=${cobol_testcase_loadPDS}
cobol_test_loadOptions=cyl space(1,1) dsorg(PO) recfm(U) blksize(32760) dsntype(library)

# Allocation of SYSMLSD Dataset used for extracting Compile Messages to Remote Error List
cobol_compileErrorFeedbackXmlOptions=tracks space(200,40) dsorg(PS) blksize(27998) lrecl(16383) recfm(v,b) new keep

#
# List of output datasets to document deletions
cobol_outputDatasets=${cobol_loadPDS}

#
# additional libraries for compile SYSLIB concatenation, comma-separated, see definitions in application-conf
# cobol_compileSyslibConcatenation=

#
# additional libraries for linkEdit SYSLIB concatenation, comma-separated, see definitions in application-conf
# cobol_linkEditSyslibConcatenation=

# cobol_dependenciesAlternativeLibraryNameMapping - an *optional* JSON String of a map defining the target dataset definition for alternate include libraries
#  this property is used to 
#   * copy files the to mapped dataset definition (PLEASE NOTE! This setting takes precendence over cobol_dependenciesDatasetMapping)
#   * defining additional allocations in the compile step
#
#  note that the SYSLIB is defaulted to the dataset definition 'cobol_cpyPDS' and is not required to be set here
#  sample: cobol_dependenciesAlternativeLibraryNameMapping = {"MYFILE": "cobol_myfilePDS", "DCLGEN" : "cobol_dclgenPDS"}
cobol_dependenciesAlternativeLibraryNameMapping=

# cobol_dependenciesDatasetMapping - an optional dbb property mapping to map dependencies to different target datasets
#  this property is used when dependencies are copied to the different build libraries, e.q dclgens going into to a dedicated library
#
#  default copies all dependencies into the dependency dataset definition
#   cobol_dependenciesDatasetMapping = cobol_cpyPDS
#
#  sample to override for a subset of dependencies using DBB file properties:
#  copy dclgens into a different library:
#   cobol_dependenciesDatasetMapping = cobol_dclgenPDS :: **/dclgens/*.cpy
#
cobol_dependenciesDatasetMapping = cobol_cpyPDS
# target the object dataset for any dependencies with file extension OBJ
cobol_dependenciesDatasetMapping = cobol_objImpPDS :: **/*.OBJ

# cobol_compileDependenciesDatasets - comma-separated list of additional datasets containing
#  dependencies resolved from the 'import' directory external for the compile step
#   OR 
#  dependencies that got loaded into different target datasets via the
#   cobol_dependenciesDatasetMapping mapping
#
# these data sets are then added to the SYSLIB concatenation for the compile step
# 
cobol_compileDependenciesDatasets = ${cobol_import_cpyPDS}

# cobol_linkEditDependenciesDatasets - comma-separated list of datasets containing
#  dependencies resolved from the 'import' directory external for the linkEdit step
#
# These data sets are then added to the SYSLIB concatenation
# 
cobol_linkEditDependenciesDatasets = ${cobol_import_objPDS}

# cobol_dependenciesCopyMode defines the copy mode to copy files from the build workspace into the target libraries
#  default sets the mode to TEXT transfer
#   cobol_dependenciesCopyMode = TEXT
#
#  sample to override for a subset of dependencies using DBB file properties:
#  copy resolved object decks as binary object:
#   cobol_dependenciesCopyMode = BINARY :: **/*.OBJ
cobol_dependenciesCopyMode = TEXT
# target the object dataset for any dependencies with file extension OBJ
cobol_dependenciesCopyMode = BINARY :: **/*.OBJ
