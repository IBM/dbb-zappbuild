# Releng properties used by language/cc.groovy

#
# Comma separated list of required build properties for language/cc.groovy
cc_requiredBuildProperties=cc_srcPDS,cc_objPDS,cc_loadPDS, \
cc_compiler,cc_linkEditor,cc_tempOptions,cc_compileMaxRC, \
SCCNPRC,SCEERUN2,SCCNCMP,SCEERUN,SCEELKEX,SCEECPP,SCEEH,SCEEHS

#
# CC compiler name
cc_compiler=CCNDRVR

# CC linker name
cc_linkEditor=IEWBLINK

#
# cc source data sets
cc_srcPDS=${hlq}.CC
cc_incPDS=${hlq}.CC.INCLUDE
cc_objPDS=${hlq}.OBJ

#
# cc load data sets
cc_loadPDS=${hlq}.LOAD

# CC test case source data sets
cc_testcase_srcPDS=${hlq}.TEST.CC

#
# CC test case load data sets
cc_testcase_loadPDS=${hlq}.TEST.LOAD
#
# List the data sets that need to be created and their creation options
cc_srcDatasets=${cc_srcPDS},${cc_incPDS},${cc_objPDS}

cc_srcOptions=cyl space(1,1) lrecl(80) dsorg(PO) recfm(F,B) dsntype(library)

cc_loadDatasets=${cc_loadPDS}
cc_loadOptions=cyl space(1,1) dsorg(PO) recfm(U) blksize(32760) dsntype(library)

cc_tempOptions=cyl space(5,5) unit(vio) blksize(80) lrecl(80) recfm(f,b) new

# List the data sets for tests that need to be created and their creation options
cc_test_srcDatasets=${cc_testcase_srcPDS}
cc_test_srcOptions=cyl space(1,1) lrecl(80) dsorg(PO) recfm(F,B) dsntype(library)

cc_test_loadDatasets=${cc_testcase_loadPDS}
cc_test_loadOptions=cyl space(1,1) dsorg(PO) recfm(U) blksize(32760) dsntype(library)

	
# Allocation of SYSMLSD Dataset used for extracting Compile Messages to Remote Error List
cc_compileErrorFeedbackXmlOptions=tracks space(200,40) dsorg(PS) blksize(27998) lrecl(16383) recfm(v,b) new keep


#
# List of output datasets to document deletions
cc_outputDatasets=${cc_loadPDS}

# CC scanner language hint
dbb.DependencyScanner.languageHint=C :: **/*.c, **/*.cc, **/*.h

#
# additional libraries for compile SYSLIB concatenation, comma-separated, see definitions in application-conf
# cc_compileSyslibConcatenation=

#
# additional libraries for linkEdit SYSLIB concatenation, comma-separated, see definitions in application-conf
# cc_linkEditSyslibConcatenation=

# cc_dependenciesAlternativeLibraryNameMapping -  an *optional* JSON String of a map defining the target dataset definition for alternate include libraries
#  this property is used to
#   * copy files the to mapped dataset definition (this setting takes precendence over cc_dependenciesDatasetMapping)
#   * defining additional allocations in the compile step
#  note that the SYSLIB is defaulted to the dataset definition 'cc_cpyPDS' and is not required to be set here
#  sample: cc_dependenciesAlternativeLibraryNameMapping = {"MYFILE": "cc_myfilePDS", "DCLGEN" : "cc_dclgenPDS"}
cc_dependenciesAlternativeLibraryNameMapping=

# cc_dependenciesDatasetMapping - an optional dbb property mapping to map dependencies to different target datasets
#  this property is used when dependencies are copied to the different build libraries, e.q dclgens going into to a dedicated library
#  note, that a dependency file needs to match a single rule
#
#  sample:
#   cc_dependenciesDatasetMapping = cc_incPDS :: **/includes/*.cpy
#   cc_dependenciesDatasetMapping = cc_dclgenPDS :: **/dclgens/*.cpy
#
#  default copies all dependencies into the dependency dataset definition which was previously passed to the utilities/BuildUitilities.copySourceFiles method
#   cc_dependenciesDatasetMapping = cc_incPDS :: **/*
cc_dependenciesDatasetMapping = cc_incPDS :: **/*
