#######################################################################
# Default application properties used by zappbuild
#
#  treated as global defaults, if not overridden by
#  settings in the /application-conf directory   

#
# dbb.scannerMapping to map file extensions to DBB dependency scanner configurations
#
#  this maps file extensions to the scanner configuration for the DBB dependency scanners
#
#  Schema
#  "scannerClass":"ScannerImplementation" : "languageHint":"DBBScannerHint"  :: comma separated list of file extensions
#
#  Be aware, that the DependencyScannerRegistry comes with a set of default scanner configurations, 
#   which are documented at:
#   https://www.ibm.com/docs/api/v1/content/SS6T76_2.0.0/javadoc/com/ibm/dbb/dependency/DependencyScannerRegistry.html
# 
#  If a file extension of a build file is not specified in the mapping,  
#   zAppBuild will skip scanning the file and only record a LogicalFile without capturing dependencies.
#    
# Default mappings (always present based on DependencyScannerRegistry)
dbb.scannerMapping = "scannerClass":"DependencyScanner", "languageHint":"COB" :: cbl,cpy,cob
dbb.scannerMapping = "scannerClass":"DependencyScanner", "languageHint":"C" :: c, h
dbb.scannerMapping = "scannerClass":"DependencyScanner", "languageHint":"ASM" :: asm, mac
dbb.scannerMapping = "scannerClass":"DependencyScanner", "languageHint":"CPP" :: cpp, hpp
dbb.scannerMapping = "scannerClass":"DependencyScanner", "languageHint":"PLI" :: pli, inc
dbb.scannerMapping = "scannerClass":"ZUnitConfigScanner" :: bzucfg
# Custom mappings
dbb.scannerMapping = "scannerClass":"DependencyScanner", "languageHint":"REXX" :: rexx

#
# Service URL for the Git provider to have a visual comparison of two hashes  
# Leveraged as a build result property <props.gitRepositoryURL>/compare/
# samples: GitHub : /compare/ ; GitLab :  /-/compare/
gitRepositoryCompareService=/compare/

#
# Determine the behavior when facing a scanner failure
# 'true' proceeds with the build and reports a warning 
# 'false' will terminate the build process (default)
continueOnScanFailure=false

#
# Flag to log output in table views instead of printing raw JSON data
# default = false
formatConsoleOutput=false

# createTestcaseDependency controls if a dependency should be set up between the testcase
# and the corresponding application program. If this property set to true, a dependency
# to the program is created for the testcase, which is then impacted by a change
# of the program. In this case, the testcase is recompiled everytime the program is modified.
# When set to false, the testcase is not impacted by the change of the program.
# Default: false
createTestcaseDependency=false

# generateDb2BindInfoRecord controls if zAppBuild generates a generic DBB build record for a build file
# to document the configured db2 bind options (application-conf/bind.properties) .
# This allows to pass the information into the packaging step and on to your deployment manager, like UCD.
# Implemented in Assembler.groovy, Cobol.groovy and PLI.groovy
# See also generateDb2BindInfoRecordProperties for the list of properties which are documented
# Default: false
generateDb2BindInfoRecord=false

# generateDb2BindInfoRecordProperties is a comma-separated list of existing bind parameters configured to zAppBuild.
# See application-conf/bind.properties for available properties.
generateDb2BindInfoRecordProperties=bind_collectionID,bind_packageOwner,bind_qualifier

#
# impactBuildOnBuildPropertyChanges controls if impact calculation should analyze
# build property changes for COBOL, PLI, ASM.
# default = false
impactBuildOnBuildPropertyChanges=false

#
# list of build property lists referencing which language properties should cause an impact build when the given property is changed
# properties need to be managed in property files within the application repository to detect the change; applies only to impact builds
# general pattern: langPrefix_impactPropertyList, optional: langPrefix_impactPropertyListCICS and langPrefix_impactPropertyListSQL
impactBuildOnBuildPropertyList=[${assembler_impactPropertyList},${assembler_impactPropertyListCICS},${assembler_impactPropertyListSQL},${bms_impactPropertyList},${cobol_impactPropertyList},${cobol_impactPropertyListCICS},${cobol_impactPropertyListSQL},${dbdgen_impactPropertyList},${linkedit_impactPropertyList},${mfs_impactPropertyList},${pli_impactPropertyList},${pli_impactPropertyListCICS},${pli_impactPropertyListSQL},${psbgen_impactPropertyList}]


# Set filter used to exclude certain information from the link edit scanning.
# The value contains a comma separated list of patterns.
# example: A filter of *.SUB1, *.SUB2 will exclude modules SUB1 and SUB2
#          from any dataset. To exclude member HELLO in PDS TEST.ASM will
#          be matched by the pattern TEST.ASM.HELLO. The pattern TEST.ASM.*
#          will match any member in the data set TEST.COBOL.
# The following filter excludes CICS and LE Library references.
dbb.LinkEditScanner.excludeFilter = ${SDFHLOAD}.*, ${SCEELKED}.*

#
# Flag to determine if the build framework should document deletions of outputs in DBB Build Report
# for build files being mapped to language scripts
#
# Default : false
documentDeleteRecords=false 
