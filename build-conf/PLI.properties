# Releng properties used by language/PLI.groovy

#
# Comma separated list of required build properties for PLI.groovy
pli_requiredBuildPropeties=pli_srcPDS,pli_incPDS,pli_objPDS,pli_loadPDS,\
pli_compiler,pli_linkEditor,pli_tempOptions,applicationOutputsCollectionName,\
SDFHCOB,SDFHLOAD,SDSNLOAD,SCEELKED

#
# PL/I compiler name
pli_compiler=IBMZPLI

#
# linker name
pli_linkEditor=IEWBLINK

#
# PL/I source data sets
pli_srcPDS=${hlq}.PLI
pli_incPDS=${hlq}.PLI.INCLUDE
pli_objPDS=${hlq}.OBJ
pli_dbrmPDS=${hlq}.DBRM
pli_BMS_PDS=${team}.BMS.COPY

#
# PL/I load data sets
pli_loadPDS=${hlq}.LOAD

# PL/I test case source data sets
pli_testcase_srcPDS=${hlq}.TEST.PLI

#
# PL/I test case load data sets
pli_testcase_loadPDS=${hlq}.TEST.LOAD

#
# List the data sets that need to be created and their creation options
pli_srcDatasets=${pli_srcPDS},${pli_incPDS},${pli_objPDS},${pli_dbrmPDS}
pli_srcOptions=cyl space(1,1) lrecl(80) dsorg(PO) recfm(F,B) dsntype(library)

pli_loadDatasets=${pli_loadPDS}
pli_loadOptions=cyl space(1,1) dsorg(PO) recfm(U) blksize(32760) dsntype(library)

pli_tempOptions=cyl space(5,5) unit(vio) blksize(80) lrecl(80) recfm(f,b) new
pli_listOptions=cyl space(5,5) unit(vio) blksize(0) lrecl(137) recfm(v,b) new

# List the data sets for tests that need to be created and their creation options
pli_test_srcDatasets=${pli_testcase_srcPDS}
pli_test_srcOptions=cyl space(1,1) lrecl(80) dsorg(PO) recfm(F,B) dsntype(library)

pli_test_loadDatasets=${pli_testcase_loadPDS}
pli_test_loadOptions=cyl space(1,1) dsorg(PO) recfm(U) blksize(32760) dsntype(library)

# Allocation of SYSMLSD Dataset used for extracting Compile Messages to Remote Error List
pli_compileErrorFeedbackXmlOptions=tracks space(200,40) dsorg(PS) blksize(27998) lrecl(16383) recfm(v,b) new keep

#
# List of output datasets to document deletions
pli_outputDatasets=${pli_loadPDS},${pli_dbrmPDS}

#
# PL/I scanner language hint
dbb.DependencyScanner.languageHint=PLI :: **/*.pli, **/*.inc, **/*.cpy

#
# additional libraries for compile SYSLIB concatenation, comma-separated, see definitions in application-conf
# pli_compileSyslibConcatenation=

#
# additional libraries for linkEdit SYSLIB concatenation, comma-separated, see definitions in application-conf
# pli_linkEditSyslibConcatenation=

# pli_dependenciesAlternativeLibraryNameMapping - an *optional* map to define target dataset definition for alternate include libraries
#  this property is used to 
#   * copy files the to mapped dataset definition (this setting takes precendence over pli_dependenciesDatasetMapping)
#   * defining additional allocations in the compile step
#  note that the SYSLIB is defaulted to the dataset definition 'pli_cpyPDS' and is not required to be set here
#  sample: pli_dependenciesAlternativeLibraryNameMapping = [MYFILE: 'pli_myfilePDS', DCLGEN : 'pli_dclgenPDS']
pli_dependenciesAlternativeLibraryNameMapping=

# pli_dependenciesDatasetMapping - an optional dbb property mapping to map dependencies to different target datasets
#  this property is used when dependencies are copied to the different build libraries, e.q dclgens going into to a dedicated library
#  note, that a dependency file needs to match a single rule
#
#  sample:
#   pli_dependenciesDatasetMapping = pli_incPDS :: **/includes/*.cpy
#   pli_dependenciesDatasetMapping = pli_dclgenPDS :: **/dclgens/*.cpy
#
#  default copies all dependencies into the dependency dataset definition which was previously passed to the utilities/BuildUitilities.copySourceFiles method
#   pli_dependenciesDatasetMapping = pli_incPDS :: **/* 
pli_dependenciesDatasetMapping = pli_incPDS :: **/*
