# Build properties used by zAppBuild/build.groovy

#
# Run zUnit Tests
# Defaults to "false", to enable, set to "true"
#runzTests=true

#
# Comma separated list of additional application property files to load
# Supports both relative path (to ${application}/application-conf/) and absolute path
applicationPropFiles=file.properties,bind.properties,Assembler.properties,\
BMS.properties,Cobol.properties,LinkEdit.properties,bind.properties,\
PLI.properties,MFS.properties,PSBgen.properties,DBDgen.properties,\
ACBgen.properties,REXX.properties,TazUnitTest.properties,\
Transfer.properties,CRB.properties,\
reports.properties,languageConfigurationMapping.properties

#
# Comma separated list all source directories included in application build. Supports both absolute
# and relative paths.  Relative assumed to be relative to ${workspace}.
# ex: applicationSrcDirs=${application},/u/build/common/copybooks
applicationSrcDirs=${application}

#
# Comma separated list of the build script processing order
buildOrder=BMS.groovy,MFS.groovy,Cobol.groovy,Assembler.groovy,PLI.groovy,\
LinkEdit.groovy,DBDgen.groovy,PSBgen.groovy,Transfer.groovy,CRB.groovy,zCEE2.groovy

#
# Comma seperated list of the test script processing order
testOrder=TazUnitTest.groovy

#
# Flag to log output in table views instead of printing raw JSON data
# See also build-conf/build.properties
# default = false
# formatConsoleOutput=false

#
# The main build branch. 
# Used for cloning collections for first topic branch build instead
#  of rescanning the entire application.
# Used to retrieve the last successful build result for the first topic branch build to 
#  obtain the baseline hash to calculate changed files for impact build scnearios.
# Used for the build type --mergeBuild to perform the git diff to 
#  identify changed files
mainBuildBranch=main

#
# The git repository URL of the application repository to establish links to the changed files
# in the build result properties
# ex: for GitHub: https://github.com/ibm/dbb-zappbuild/
gitRepositoryURL=

#
# exclude list used when scanning or running full build
excludeFileList=.*,**/.*,**/*.xml,**/*.groovy,**/*.json,**/*.md,**/application-conf/*.*

#
# comma-separated list of file patterns for which impact calculation should be skipped. Uses glob file patterns
# sample: skipImpactCalculationList=**/epsmtout.cpy,**/centralCopybooks/*.cpy
skipImpactCalculationList=

#
# Flag to expand impact analysis to automatically include all mandatory submodules to build list in pipeline builds with a DBB Metadatastore connection based on the intermediate build list after impact analysis
# This functionality queries and relies on the DBB Output collection of the application
# 
# The feature is specifically useful for applications using static calls to increase the isolation of the build environment
# If the property is set to true, if a main program undergoes a change, all statically called sub programs are recompiled
# Default: false
# This property is setup as a DBB file property. This allows to enable the feature just for a subset of your build files
# Sample to inspect the intermediate build list add submodules for Cobol build files
# addSubmodulesToBuildList=true :: **/*.cbl
addSubmodulesToBuildList=false :: **/*.cbl

#
# Job card, please use \n to indicate a line break and use \ to break the line in this property file
# Example: jobCard=//RUNZUNIT JOB ,MSGCLASS=H,CLASS=A,NOTIFY=&SYSUID,REGION=0M
jobCard=

###############################################################
# Build Property management
###############################################################
# zAppBuild allows you to manage default properties and file properties:
# - Documentation on how to override corresponding default build properties can be found at:
#   https://github.com/IBM/dbb-zappbuild/docs/FilePropertyManagement.md

# ### Properties to enable and configure build property overrides using individual artifact properties files

# flag to enable the zAppBuild capability to load individual artifact properties files for all individual source files.
# Note: To only activate loadFileLevelProperties for a group of files, it is recommended to use DBB's file property path
# syntax in application-conf/file.properties instead.
# default: false
loadFileLevelProperties=false

# Property to enable/disable and configure build property overrides using language configuration mapping
# file - languageConfigurationMapping.properties
# If loadFileLevelProperties is set as true above, the properties from the individual artifact properties files will override the
# properties from language configuration properties file.
# Note: To only activate loadLanguageConfigurationProperties for a group of files, it is recommended to use DBB's file property path
# syntax in application-conf/file.properties instead.
loadLanguageConfigurationProperties=false

# relative path to folder containing individual artifact properties files
# assumed to be relative to ${workspace}/${application}
propertyFilePath=properties

# file extension for individual artifact properties files
# default: properties
propertyFileExtension=properties

###############################################################
# Dependency Analysis and Impact Analysis configuration
###############################################################

#
# boolean flag to configure the SearchPathDependencyResolver to evaluate if resolved dependencies impact
#  the file flags isCICS, isSQL, isDLI, isMQ when creating the LogicalFile
#
#  default:false
resolveSubsystems=false

#
# SearchPathImpactFinder resolution searchPath configuration
#  list of multiple search path configurations which are defined below
#
# this configuration is used when running zAppBuild with the --impactBuild option
#  to calculate impacted files based on the identified changed files
impactSearch=${copybookSearch}${pliincludeSearch}${bmsSearch}${linkSearch}${rexxCopySearch}${tazTestConfigSearch}${tazTestcasePgmSearch}${eztMacSearch}

#
# copybookSearch
# searchPath to locate Cobol copybooks
# used in dependency resolution and impact analysis
#
# Please be as specific as possible when configuring the searchPath.
# Alternate configurations:
#
# dependency resolution from multiple repositories / multiple root folders:
# copybookSearch = search:${workspace}/?path=**/copybook/*.cpy
#
# dependency resolution across all directories in build workspace, but filtering on the file extension cpy:
# copybookSearch = search:${workspace}/?path=**/*.cpy
# dependency resolution across all directories in build workspace, but filtering on the file extension cpy and cobcpy:
# copybookSearch = search:${workspace}/?path=**/*.cpy;**/*.cobcpy
#
# dependency resolution in the application directory and a shared common copybook location:
# copybookSearch = search:${workspace}/?path=${application}/copybook/*.cpy;/u/build/common/copybooks/*.cpy
#
# More samples can be found along with the syntax for the search path configurations at:
# https://www.ibm.com/docs/en/dbb/2.0.0?topic=apis-dependency-impact-resolution#6-resolving-logical-build-dependencies-to-local-physical-files
#
copybookSearch = search:${workspace}/?path=${application}/copybook/*.cpy

#
# pliincludeSearch
# searchPath to locate PLI include files
# used in dependency resolution and impact analysis
pliincludeSearch = search:${workspace}/?path=${application}/plinc/*.cpy

# asmMacroSearch
# searchPath to locate Assembler macro files
# use category filters on what you want to include during the scan (i.e. excludes macro-def keyword)
# used in dependency resolution and impact analysis
asmMacroSearch = search:[SYSLIB:MACRO]${workspace}/?path=${application}/maclib/*.mac

# asmCopySearch
# searchPath to locate Assembler copy files
# used in dependency resolution and impact analysis
asmCopySearch = search:[SYSLIB:COPY]${workspace}/?path=${application}/maclib/*.mac

#
# bmsSearch
# searchPath to locate impacted bms maps
# used only in impact analysis
bmsSearch = search:${workspace}/?path=${application}/bms/*.bms

#
# rexxCopySearch
# searchPath to locate rexx copy - defaults to the local rexx folder in the main application folder
# used in dependency resolution and impact analysis
rexxCopySearch = search:[SYSLIB:COPY]${workspace}/?path=${application}/rexx/*.rexx

#
# linkSearch
#
# searchPath to locate impacted linkcards or main programs after an included submodule is changed
# leverages the output collection, which has the dependency info from the executable
# category LINK only; used only in impact analysis
#
# Additional samples:
#
# impact resolution across all directories in build workspace, but filtering on the file extension cbl:
# staticLinkSearch = search:[:LINK]${workspace}/?path=**/*.cbl
#
# impact resolution across all directories in build workspace, but filtering on the file extension cbl and pli (for cobol and pli submodules):
# staticLinkSearch = search:[:LINK]${workspace}/?path=**/*.cbl,**/*.pli
#
# More samples can be found along with the syntax for the search path configurations at:
# https://www.ibm.com/docs/en/dbb/2.0.0?topic=apis-dependency-impact-resolution#6-resolving-logical-build-dependencies-to-local-physical-files
#
# Special case with Dependency Scanner Transfer Control Statement capturing turned on (default is off)
# the scanners detect a static call to the literal, which would need to turn into a new rule for CALL:
# staticCallSearch = search:[:CALL]${workspace}/?path=${application}/cobol/*.cbl
#
linkSearch = search:[:LINK]${workspace}/?path=${application}/cobol/*.cbl

# tazTestConfigSearch
# searchPath to locate TAZ test configuration files
# used in impact analysis
tazTestConfigSearch = search:[:ZUNITINC]${workspace}/?path=${application}/cobol/*.cbl;${application}/pli/*.pli;${application}/tests/*.cbl;${application}/tests/*.pli

#
# tazRecordingFileSearch
# searchPath to locate TAZ recording files
# used in dependency resolution
tazRecordingFileSearch = search:[SYSPLAY:]${workspace}/?path=${application}/tests/*.rec

#
# tazTestcasePgmSearch
# searchPath to locate impacted test case programs
# see also build-conf/build.properties -> createTestcaseDependency
# used in impact analysis
tazTestcasePgmSearch = search:[SYSPROG:PROGRAMDEPENDENCY]${workspace}/?path=${application}/cobol/*.cbl;${application}/pli/*.pli

#
# eztMacSearch
# searchPath to locate EZT macros 
# used in dependency resolution and impact analysis
eztMacSearch = search:${workspace}/?path=${application}/eztmacros/*.eztm 
