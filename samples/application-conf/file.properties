# Application script mappings and file property overrides

#
# Script mappings for all application programs
dbb.scriptMapping = Assembler.groovy :: **/*.asm
dbb.scriptMapping = BMS.groovy :: **/*.bms
dbb.scriptMapping = MFS.groovy :: **/*.mfs
dbb.scriptMapping = PSBgen.groovy :: **/psb/*.asm
dbb.scriptMapping = DBDgen.groovy :: **/dbd/*.asm
dbb.scriptMapping = Cobol.groovy :: **/*.cbl
dbb.scriptMapping = LinkEdit.groovy :: **/*.lnk
dbb.scriptMapping = PLI.groovy :: **/*.pli
dbb.scriptMapping = ZunitConfig.groovy :: **/*.bzucfg
dbb.scriptMapping = Transfer.groovy :: **/*.jcl, **/*.xml
dbb.scriptMapping = zCEE3.groovy :: **/openapi.yaml
dbb.scriptMapping = CRB.groovy :: **/crb/*.yaml
dbb.scriptMapping = zCEE2.groovy :: **/zosconnect_artefacts/**/*.*

#
# dbb.scannerMapping to map files extensions to DBB dependency scanner configurations
#
#  to override/expand the definitions from build-conf/defaultzAppBuildConf.properties
#
#  this maps file extensions to scanner configuration for the DBB dependency scanners
#  also see:
#  https://www.ibm.com/docs/api/v1/content/SS6T76_2.0.0/javadoc/com/ibm/dbb/dependency/DependencyScannerRegistry.html
#
#  Schema
#  "scannerClass":"ScannerImplementation" : "languageHint":"DBBScannerHint"  :: comma separated list of file extensions
#
#  Note - if an extension of a build file is not specified in the mapping,
#   zAppBuild will skip scanning the file and only record a LogicalFile without capturing dependencies.
#
# dbb.scannerMapping = "scannerClass":"DependencyScanner", "languageHint":"COB" :: cbl,cpy,cob
# dbb.scannerMapping = "scannerClass":"DependencyScanner", "languageHint":"C" :: c, h
# dbb.scannerMapping = "scannerClass":"DependencyScanner", "languageHint":"ASM" :: asm, mac
# dbb.scannerMapping = "scannerClass":"DependencyScanner", "languageHint":"CPP" :: cpp, hpp
# dbb.scannerMapping = "scannerClass":"DependencyScanner", "languageHint":"PLI" :: pli, inc
# dbb.scannerMapping = "scannerClass":"ZUnitConfigScanner" :: bzucfg

####
# General file level overwrites through DBB Build Properties
# to control the allocations of system datasets for compile and link steps
# or activation of preprocessing

# isCICS - boolean flag indicating that the process for the module requires the
# CICS libraries, source code needs preprocessing 
#
# flag is set by the DBB scanner if it detects EXEC CICS statements.
# 
# Override the flag for source code or linkcards that are executed in a CICS environment
#  to enable proprocessing and to resolve appropriate language interface module
#  
isCICS = true :: **/cobol/member.cbl

# isSQL - boolean flag indicating that the process for the module requires the
# Db2 libraries, source code needs preprocessing 
#
# flag is set by the DBB scanner if it detects SQL statements.
# 
isSQL = true :: **/cobol/member.cbl

# isMQ - boolean flag indicating that the process for the module requires the
# MQ libraries got compile and link steps and to generate the
# MQ stub instructions for the link phase based on the flags
# isCICS, isDLI and isIMS (except the LinkEdit.groovy)
#
# flag is set by the DBB scanner if it detects MQ calls.
#
# Override the flag to force adding 
#
isMQ = true :: **/cobol/member.cbl

# isIMS - indicating that the process for the module requires the
# IMS libraries in the link phase. Applicable for
#  DL/I batch programs
#  IMS online programs 
#
# flag is NOT set by the DBB scanner.
#
# Set the flag for source code or link cards
#  to resolve appropriate IMS language interface module (DFSLI000) 
#  
isIMS = true :: **/cobol/DLIBATCH.cbl


#########
# Property File Management
#
# > Please check for available file property overwrites within samples/application-conf/README.md <
# The tables indicate which build parameters can be overwritten for each build file to overwrite the default settings.
# 
# The subsequent section provides the configuration parameters to outline
# - file level property overwrites by loading individual artifact properties files
# - loading language configurations that define multiple build parameters for the mapped files
#
# Please see the detailed documentation on file property management at:
# https://github.com/IBM/dbb-zappbuild/docs/FilePropertyManagement.md
#
#########

#
# Flag to enable the zAppBuild capability to load individual artifact properties files for source files.
# Example 1: The following file path pattern looks for an individual artifact properties file for epsmlist.cbl:
# loadFileLevelProperties = true :: **/cobol/epsmlist.cbl 
# Example 2: Enable individual artifact properties file for all COBOL files: loadFileLevelProperties=true :: **/cobol/*.cbl
# loadFileLevelProperties = true :: **/cobol/*.cbl 

#
# Language Configuration properties management
#
# Flag to enable the zAppBuild capability to load language configuration properties files for source files.
# Example 1: Enable language configuration mapping for all COBOL files: loadLanguageConfigurationProperties=true :: **/cobol/*.cbl
# loadLanguageConfigurationProperties = true :: **/cobol/*.cbl
# Example 2: The following file path pattern looks for a language configuration properties file mapping for epsnbrvl.cbl and epsmpmt.cbl 
# in the application-conf/languageconfigurationMapping.properties file:
# loadLanguageConfigurationProperties = true :: **/cobol/epsnbrvl.cbl, **/cobol/epsmpmt.cbl

#
# Properties mapping for assigning the language configuration to build files to specify the build configuration
# This option is an alternative approach for mapping build files to the language configuration file
# 
# languageConfiguration = languageConfigProps01 :: **/cobol/epsnbrvl.cbl, **/cobol/epsmpmt.cbl
# languageConfiguration = languageConfigProps02 ::  **/cobol/epscmort.cbl


#########
# zUnit Integration
#########
#
# file mapping for generated zUnit Test case programs (Cobol) to use a seperate set of libraries
# cobol_testcase = true :: **/testcase/*.cbl

# file mapping for generated zUnit Test case programs (PL/I) to use a seperate set of libraries
# pli_testcase = true :: **/testcase/*.pli

# mapping for overwriting the impactResolution rules in application.properties
# impactResolutionRules=[${copybookRule},${linkRule}] :: **/copy/*.cpy,**/cobol/*.cbl

#########
# Configuration for Transfer.groovy which copies files to target datasets and report them
# in the BuildReport
#########
#
# PropertyMapping to map files using the Transfer.groovy language script to different target datasets
#
# transfer_datasetMapping = transfer_jclPDS :: **/*.jcl
# transfer_datasetMapping = transfer_xmlPDS :: **/xml/*.*
#
# file mapping for overwriting the default deployType of the Transfer.groovy language script
#
# transfer_deployType = JCL :: **/*.jcl
# transfer_deployType = XML :: **/xml/*.*

#
# Override of the default copy mode to transfer the file to the target library
# Available modes are ASA_TEXT, BINARY, LOAD, and TEXT
# Documentation: https://www.ibm.com/docs/api/v1/content/SS6T76_2.0.0/javadoc/com/ibm/dbb/build/DBBConstants.CopyMode.html
# transfer_copyMode=BINARY :: **/*.object


#########
# Configuration for zCEE2.groovy to specify file-level overrides
#########

#
# Mapping of input files with types of files
# PROJECT can be used for SAR and AAR projects
# SAR and ARA can be used for SAR Properties files and ARA properties files
#
# zcee2_inputType=PROJECT :: **/zosconnect_artefacts/apis/**/*.*, **/zosconnect_artefacts/services/**/*.*
# zcee2_inputType=SAR :: **/zosconnect_artefacts/SAR/*.properties
# zcee2_inputType=ARA :: **/zosconnect_artefacts/requester/**/*.properties

#
# Build Rank for zCEE2 artifacts
#
#zcee2_fileBuildRank=1 :: **/zosconnect_artefacts/services/**
#zcee2_fileBuildRank=2 :: **/zosconnect_artefacts/requester/**/*.properties
