# Application properties to configure analysis and reporting of external dependencies and changes
# Sample to override the configuration  

###########################################################
#
# reportExternalImpacts capability to report externally impacted files 
#  in other application systems which are also built with zAppBuild
#
###########################################################
#
# Flag to indicate if an *impactBuild* or *mergeBuild* should analyze and report external impacted files
# in other collections. cli option (-re, reportExternalImpacts) passed to build.groovy will take precedence.
#  
# Default: false
# reportExternalImpacts=false

#
# AnalysisDepths when performing impact analysis for external impacts
# Options: (simple/deep)
#   simple - will not allow recursion and only find files which have a direct dependency to the changed file 
#   deep -  will recursively resolve impacts, which is more expensive compared to simple mode
#
# Default: simple
# reportExternalImpactsAnalysisDepths=simple

# comma-separated list of pathMatcher filters to limit the analysis
# of external impacts to a subset of the changed files within the current application.
# 
# Sample setting to perform the analysis for all changes within the current application:
#      reportExternalImpactsAnalysisFileFilter=**/*
# 
# Sample setting to perform the analysis only for files with file extension cpy:
#      reportExternalImpactsAnalysisFilter=**/*.cpy
# 
# reportExternalImpactsAnalysisFileFilter=**/*

#
# comma-separated list of regex patterns of DBB collection names for which external impacts should be documented
# Uses regex patterns. 
#  Sample: collectionPatternsReportExternalImpacts=.*-dev.* --> all collections which contain "-dev"
# 
# reportExternalImpactsCollectionPatterns=.*-main.*

###########################################################
#
# The reportConcurrentChanges capability allows for your topic branches:
#  * to generate reports of changes on the defined upstream branch
#    which are ahead of your configuration (branch)
#  * it leverages a triple-dot diff to compare the remote/origin/props.mainBuildBranch
#    with the current HEAD 
#  * if verifies, that the build list does not intersect with the list of changes of 
#    the mainBuildBranch
###########################################################
#
# boolean flag to activate the reporting of upstream changes
#  to report recent changes on the mainBuildBranch which don't exist on your configuration
#
# default:false 
reportConcurrentChanges=false

# build property to define the upstream branch for which the changes should be calculated.
#  typically the branch into which changes of the topic branch are planned to be merged into.
#
# default: mainBuildBranch 
reportConcurrentChangesUpstreamBranch=${mainBuildBranch}

# boolean flag to mark the build as error, when the verification identifies, that 
#  the list of changes on the mainBuildBranch overlap with the current build list
#
# default:false 
reportConcurrentChangesIntersectionFailsBuild=false