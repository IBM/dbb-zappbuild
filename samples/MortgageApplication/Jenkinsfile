// Updated by Regi to work with Regi Repo at github.com
// --> Simplified jenkinsfile using sandbox2 branch
// * July 24, 2020  - for Mortgage sample using RegiBrazil
// * with --verbose - see line 16)
// * build type = -i (incremental - see line 41)
// * First time do a "full build" to populate the dbb server
// Global variables
// This is modified to use GitHub and dbb-zappbuild-1/samples/MortgageApplication
    println "**Regi IF First build change to full build"
    println "**Regi IF using VPN the gitHost must be physical IP"
// ---------------------------Agents labels
def linuxAgent = 'master'
def agentLabel = 'zOSSlaveJ'
// ---------------------------Verbose
//def verbose = false
// def buildVerbose = ''
def buildVerbose = '-v'
println "**Regi - Verbose in effect"
// ---------------------------Hosts and ports
def linuxHost = '10.1.1.1'
def zosHost = '10.1.1.2'
def zosPort = '22'
// ----------------------------DBB
def dbbUrl = 'https://'+linuxHost+':11043/dbb'
def dbbHlq = 'JENKINS'
def dbbDaemonPort = '8080'
def dbbGroovyzOpts= ''
// ---------------------------- Git (GitHub)
def gitCredId = '8e1d5827-1f44-4168-a2a1-f47f78e3ea92'
def gitCred = '8e1d5827-1f44-4168-a2a1-f47f78e3ea92'
def gitOrg = 'RegiBrazil'
def srcGitBranch = 'sandbox2'
def gitHost = 'github.com'
def srcGitRepo =     'git@'+gitHost+':'+gitOrg+'/dbb-zappbuild-1.git'
// git@github.com:RegiBrazil/dbb-zappbuild-1.git
// def gitHost = '140.82.114.3'
// ----------------------------- Build type
//  -i: incremental
//  -f: full
//  -c: only changed source
def buildType='-i'
// def buildType='-f'
// -----------------------Build properties related to a specific jenkins agent
// def buildConf=''
// UCD definitions - Using V6
def ucdApplication = 'MortgageApplication'
def ucdProcess = 'InstallMortgage'
def ucdComponent = 'JKEMortgageCICS'
def ucdEnv = 'QA'
def ucdBuztool = '/etc/ibm-ucd/v6.2.6/dtsc-agent/bin/buztool.sh'
// ----------------------------  Build extra args
//  -d: COBOL debug options
def buildExtraParams='-d'
// --------------------------- Deploy only in case of source code modifications
def needDeploy = true
// ===========================================================
pipeline { agent { label linuxAgent }
      environment { WORK_DIR = "${WORKSPACE}/BUILD-${BUILD_NUMBER}" }
      options { skipDefaultCheckout(true) }
// -------------------------------------------------------------------------
      stages { stage('Init') {steps { script {env.DBB_HOME = '/var/dbb/v.1.0.6'
       	echo "Repository: ${srcGitRepo} - branch: ${srcGitBranch} "
	if ( env.ZOS_HOST ) {zosHost = env.ZOS_HOST} 					
	else {env.ZOS_HOST = zosHost}
	if ( env.ZOS_PORT ) {zosPort = env.ZOS_PORT} 						
	else {env.ZOS_PORT = zosPort} 				
	if ( env.BRANCH_NAME != null ) {srcGitBranch = env.BRANCH_NAME; }
        if ( env.DEBUG_PIPELINE && env.DEBUG_PIPELINE == 'true' )     	
        {verbose = true  buildVerbose = '-v'
	echo sh(script: 'env|sort', returnStdout: true)}
             }}}
// -------------------------------------------------------------------------
        stage('Git Clone/Refresh') {
            agent { label agentLabel }
            steps {
                script {
                    println "**Regi >branch: ${srcGitBranch}"
                    println "**Regi >WORKSPACE  is ${WORKSPACE}"
                    println "**REGI > Simplified clone **"
 // -----------------------------------------------------------------
                    dir('dbb-zappbuild-1') {
 /* ---BEFORE
	            scmVars = checkout([$class: 'GitSCM', branches: [[name: srcGitBranch]],
		    doGenerateSubmoduleConfigurations: false,
		    submoduleCfg: [],
    extensions: [[$class: 'SparseCheckoutPaths',sparseCheckoutPaths:[[$class:'SparseCheckoutPath', path:'cobol/'],
				[$class:'SparseCheckoutPath', path:'build.groovy'],
				[$class:'SparseCheckoutPath', path:'build2.groovy'],
				[$class:'SparseCheckoutPath', path:'build-conf/'],
				[$class:'SparseCheckoutPath', path:'languages/'],
				[$class:'SparseCheckoutPath', path:'samples/'],
				[$class:'SparseCheckoutPath', path:'utilities/']
		]]
				       ],								
				userRemoteConfigs: [[credentialsId: gitCred,url: srcGitRepo, ]]])
		                   } } } }
 */
 //  Now is the simplified clone
   checkout([$class: 'GitSCM', branches: [[name: srcGitBranch]], doGenerateSubmoduleConfigurations: false,
            submoduleCfg: [], userRemoteConfigs: [[url: srcGitRepo]]])
			               } } } }
// -------------------------------------------------------------------------
		stage('DBB Build') {
			steps {
				script{
					node( agentLabel ) {
						if ( dbbDaemonPort != null ) {
		def r = sh script: "netstat | grep ${dbbDaemonPort}", returnStatus: true
		if ( r == 0 ) {
				println "DBB Daemon is running.."
				dbbGroovyzOpts = "-DBB_DAEMON_PORT ${dbbDaemonPort} -DBB_DAEMON_HOST 127.0.0.1"
			      }
		else {
				println "WARNING: DBB Daemon not running build will be longer.."
							}
						}
						
 sh "$DBB_HOME/bin/groovyz ${WORKSPACE}/dbb-zappbuild-1/build.groovy --logEncoding UTF-8 -w ${WORKSPACE} --application MortgageApplication --sourceDir ${WORKSPACE}/dbb-zappbuild-1/samples  --workDir ${WORKSPACE}/BUILD-${BUILD_NUMBER}  --hlq ${dbbHlq}.MORTGAGE --url $dbbUrl -pw ADMIN $buildType  $buildVerbose $buildExtraParams "

def files = findFiles(glob: "**BUILD-${BUILD_NUMBER}/buildList.txt")
 //  ------------------------
// Do not deploy if nothing in the build list
						needDeploy = files.length > 0 && files[0].length > 0
						if (needDeploy) {
						   sh "iconv -f ISO8859-1 -t IBM-1047 ${WORKSPACE}/BUILD-${BUILD_NUMBER}/buildList.txt > ${WORKSPACE}/BUILD-${BUILD_NUMBER}/buildList-1047.txt"
			        		}
						def files1 = findFiles(glob: "**BUILD-${BUILD_NUMBER}/buildList-1047.txt")
			        		needTest = files1.length > 0 && files1[0].length > 0
						
 					}
				}
			}
			post {
				always {
					node( agentLabel ) {
						dir("${WORKSPACE}/BUILD-${BUILD_NUMBER}") {
							archiveArtifacts allowEmptyArchive: true,
											artifacts: '*.log,*.json,*.html',
											excludes: '*clist',
											onlyIfSuccessful: false
						}
					}
				}
			}
		}
// -------------------------------------------------------------------------
        stage('Push to UCD Code station') {
            steps {
                script{
                    if ( needDeploy ) {
                        node( agentLabel ) {
   println "Push to UCD Code station"
   println "**Regi > buztool:   ${ucdBuztool}"
   println "**Regi > Component: ${ucdComponent}"
   sh "$DBB_HOME/bin/groovyz ${WORKSPACE}/dbb-zappbuild-1/utilities/deploy.groovy --buztool  ${ucdBuztool}
       --workDir ${WORKSPACE}/BUILD-${BUILD_NUMBER}  --component ${ucdComponent}   "
                                           }
                                      }
                     }
                  }
                                          }
// -------------------------------------------------------------------------
        stage('Deploy to CICS using UCD') {
            steps {
                script{
                    if ( needDeploy ) {
                        node( linuxAgent ) {
                            script{
                                step(
                                  [$class: 'UCDeployPublisher',
                                    deploy: [
                                        deployApp: ucdApplication,
                                        deployDesc: 'Requested from Jenkins',
                                        deployEnv: ucdEnv,
                                        deployOnlyChanged: false,
                                        deployProc: ucdProcess,
                                        deployVersions: ucdComponent + ':latest'],
                                    siteName: 'Urbancode server'])
//  siteName  is the UCD Profile name that is defined at Jenkins configuration
                                   }
                                           }
                                      }
                       }
                  }
}}}