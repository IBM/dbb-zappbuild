# Build properties used by zAppBuild/build.groovy

#
# Comma separated list of additional application property files to load
# Supports both relative path (to ${application}/application-conf/) and absolute path
applicationPropFiles=file.properties,BMS.properties,Cobol.properties,LinkEdit.properties

#
# Comma separated list all source directories included in application build. Supports both absolute 
# and relative paths.  Relative assumed to be relative to ${workspace}.
# ex: applicationSrcDirs=${application},/u/build/common/copybooks
applicationSrcDirs=${application}

#
# Comma separated list of the build script processing order
buildOrder=BMS.groovy,Cobol.groovy,LinkEdit.groovy

#
# The main build branch.  Used for cloning collections for topic branch builds instead
# of rescanning the entire application.
mainBuildBranch=main

#
# The git repository URL of the application repository to establish links to the changed files 
# in the build result properties 
# ex: GitHub: https://github.com/ibm/dbb-zappbuild/
gitRepositoryURL=https://github.com/ibm/dbb-zappbuild/

#
# exclude list used when scanning or running full build
excludeFileList=.*,**/.*,**/*.properties,**/*.xml,**/*.groovy,**/*.json,**/*.md,**/application-conf/*.*

#
# comma-separated list of file patterns for which impact calculation should be skipped. Uses glob file patterns
# sample: skipImpactCalculationList=**/epsmtout.cpy,**/centralCopybooks/*.cpy
skipImpactCalculationList=


###############################################################
# Build Property management
###############################################################
#
# zAppBuild is equipped to set build properties from individual property files for the file being
# built (i.e., build file). Typical usage scenario for using this capability is to overwrite
# compile or link options, managing them in individual property files. Using this approach might
# ease the migration of properties from the previous build system rather than using the DBB inherent
# capability of using File property path patterns.
# 
# zAppBuild allows 3 levels of where you can define properties:
#  
#  Default Build properties
#     which are defined in /build-conf and in /application-conf property files (i.e. Cobol.properties)
#  Overwrites for groups or individual files 
#     typically defined in file.properties using the file overwrite property syntax
#  Overwrites through individual property files
#     being located in a configurable subfolder (i.e. properties/epsmlist.cbl.properties)
#
# Individual property files are resolved within the pattern <propertyFilePath directory>/<buildFile>.<propertyFileExtension>, e.q.
#  for the build file epsmlist.cbl the process searches for a file in the propertyFilePath directory
#  with the naming convention epsmlist.cbl.properties.
#  If no property file is found, the build will take the default values or potentially already defined file properties.
#
# Please be aware, that overwrites for a specific build property should be seen as exclusively managed in either the file property path syntax or
#  in the individual property files. The following section gives an example how both approaches can be combined:
#
# You can use a file property path syntax to define a file property for a group of files. The below defines the deployType for
#  all build files in the folder cobol beginning with AB* to be BATCHLOAD:
#
#  cobol_deployType = BATCHLOAD :: **/cobol/AB*.cbl
#
# While you define a individual file property file for app/cobol/AB123456.cbl containing
#  
#  cobol_compileParms = LIB,SOURCE   

#
# flag to enable the zAppBuild capability to load individual property files for a build file, default: false
# It is recommended to use a file property path syntax to activate the loading of property files for a group of files,
# while not all types in the repository. See above sample. 
loadFileLevelProperties=false

# relative path to folder containing individual property files
# assumed to be relative to ${workspace}/${application}
propertyFilePath=properties

# file extension for individual property files
# default: properties
propertyFileExtension=properties

###############################################################
# Dependency Analysis and Impact Analysis configuration
###############################################################
#
# flag to define which DBB API is used for dependency and impact analysis
# 
#  false = uses the DependencyResolver and ImpactResolver APIs (default)
#          please note that DependencyResolver and ImpactResolver APIs are deprecated
#          configuration is based on the lang_resolutionRules and impactResolutionRules build properties
#
#  true  = leverages the DBB SearchPathDependencyResolver and SearchParthImpactFinder APIs introduced with DBB 1.1.2
#          configuration is based on the lang_dependencySearch and impactSearch build properties
#
useSearchConfiguration=false

#
# boolean flag to configure the SearchPathDependencyResolver to evaluate if resolved dependencies impact
#  the file flags isCICS, isSQL, isDLI, isMQ when creating the LogicalFile
# 
#  requires to use new APIs via useSearchConfiguration=true
#  default:false 
resolveSubsystems=false

#
# Impact analysis resolution rules (JSON format)
#  leverages the ImpactResolver API
# ** deprecated ** - see zAppBuild build property >impactSearch< 
impactResolutionRules=[${copybookRule},${bmsRule},${linkRule},${propertyRule}]

#
# Impact finder resolution search configuration
#  leverages the SearchPathImpactFinder API 
impactSearch=${copybookSearch}${bmsSearch}${linkSearch}

#
# Rule to locate Cobol copy books
# ** deprecated **
copybookRule = {"library": "SYSLIB", \
                  "searchPath": [ \
                    {"sourceDir": "${workspace}", "directory": "${application}/copybook"} \
                 ] \
               } 

#
# copybookSearch 
# searchPath to locate Cobol copybooks 
# used in dependency resolution and impact analysis
# 
# Please be as specific as possible when configuring the searchPath.
# Alternate configurations: 
#
# dependency resolution from multiple repositories / multiple root folders:
# copybookSearch = search:${workspace}/?path=**/copybook/*.cpy 
#
# dependency resolution across all directories in build workspace, but filtering on the file extension cpy:
# copybookSearch = search:${workspace}/?path=**/*.cpy
# dependency resolution across all directories in build workspace, but filtering on the file extension cpy and cobcpy:
# copybookSearch = search:${workspace}/?path=**/*.cpy;**/*.cobcpy
#
# dependency resolution in the application directory and a shared common copybook location:
# copybookSearch = search:${workspace}/?path=${application}/copybook/*.cpy;/u/build/common/copybooks/*.cpy
# 
# More samples can be found at: https://www.ibm.com/docs/en/adfz/dbb/1.1.0?topic=scripts-how-manage-build-dependencies
#
copybookSearch = search:${workspace}/?path=${application}/copybook/*.cpy    

#
# Rule to locate BMS maps
# ** deprecated ** 
bmsRule =   {"library": "SYSLIB", \
              "searchPath": [ \
                 {"sourceDir": "${workspace}", "directory": "${application}/bms"} \
              ] \
            } 

#
# bmsSearch
# searchPath to locate impacted bms maps
# used only in impact analysis
bmsSearch = search:${workspace}/?path=${application}/bms/*.bms

# Rule to locate COBOL programs and Link files for rebuilding statically linked load modules
# ** deprecated **  
linkRule =   {"category": "LINK", \
              "searchPath": [ \
                 {"sourceDir": "${workspace}", "directory": "${application}/cobol"}, \
                 {"sourceDir": "${workspace}", "directory": "${application}/link"} \
              ] \
            } 

#
# linkSearch
# searchPath to locate impacted programs or linkcards
# category LINK only; used only in impact analysis
linkSearch = search:[:LINK]${workspace}/?path=${application}/cobol/*.cbl;${application}/link/*.lnk           

# Rule to detect DBB Build property changes 
# ** deprecated ** 
propertyRule =   {"category": "PROPERTY"} 

