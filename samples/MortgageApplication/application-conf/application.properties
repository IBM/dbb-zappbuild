# Build properties used by zAppBuild/build.groovy

#
# Comma separated list of additional application property files to load
# Supports both relative path (to ${application}/application-conf/) and absolute path
applicationPropFiles=file.properties,BMS.properties,Cobol.properties,LinkEdit.properties,languageConfigurationMapping.properties

#
# Comma separated list all source directories included in application build. Supports both absolute 
# and relative paths.  Relative assumed to be relative to ${workspace}.
# ex: applicationSrcDirs=${application},/u/build/common/copybooks
applicationSrcDirs=${application}

#
# Comma separated list of the build script processing order
buildOrder=BMS.groovy,Cobol.groovy,LinkEdit.groovy

#
# The main build branch.  Used for cloning collections for topic branch builds instead
# of rescanning the entire application.
mainBuildBranch=main

#
# The git repository URL of the application repository to establish links to the changed files 
# in the build result properties 
# ex: GitHub: https://github.com/ibm/dbb-zappbuild/
gitRepositoryURL=https://github.com/ibm/dbb-zappbuild/

#
# exclude list used when scanning or running full build
excludeFileList=.*,**/.*,**/*.properties,**/*.xml,**/*.groovy,**/*.json,**/*.md,**/application-conf/*.*

#
# comma-separated list of file patterns for which impact calculation should be skipped. Uses glob file patterns
# sample: skipImpactCalculationList=**/epsmtout.cpy,**/centralCopybooks/*.cpy
skipImpactCalculationList=


###############################################################
# Build Property management
###############################################################
# zAppBuild allows you to manage default properties and file properties:
# - Documentation on how to override corresponding default build properties can be found at:
#   https://github.com/IBM/dbb-zappbuild/docs/FilePropertyManagement.md

# ### Properties to enable and configure build property overrides using individual artifact properties files

# flag to enable the zAppBuild capability to load individual artifact properties files for all individual source files. 
# Note: To only activate loadFileLevelProperties for a group of files, it is recommended to use DBB's file property path
# syntax in application-conf/file.properties instead.
# default: false
loadFileLevelProperties=false

# Property to enable/disable and configure build property overrides using language configuration mapping 
# file - languageConfigurationMapping.properties
# If loadFileLevelProperties is set as true above, the properties from the individual artifact properties files will override the 
# properties from language configuration properties file.
# Note: To only activate loadLanguageConfigurationProperties for a group of files, it is recommended to use DBB's file property path
# syntax in application-conf/file.properties instead.
loadLanguageConfigurationProperties=false

# relative path to folder containing individual artifact properties files
# assumed to be relative to ${workspace}/${application}
propertyFilePath=properties

# file extension for individual artifact properties files
# default: properties
propertyFileExtension=properties

###############################################################
# Dependency Analysis and Impact Analysis configuration
###############################################################
#
# boolean flag to configure the SearchPathDependencyResolver to evaluate if resolved dependencies impact
#  the file flags isCICS, isSQL, isDLI, isMQ when creating the LogicalFile
# 
#  default:false 
resolveSubsystems=false

#
# SearchPathImpactFinder resolution searchPath configuration
#  list of multiple search path configurations which are defined below 
#
# this configuration is used when running zAppBuild with the --impactBuild option
#  to calculate impacted files based on the identified changed files
impactSearch=${copybookSearch}${bmsSearch}${linkSearch}

#
# copybookSearch 
# searchPath to locate Cobol copybooks 
# used in dependency resolution and impact analysis
# 
# Please be as specific as possible when configuring the searchPath.
# Alternate configurations: 
#
# dependency resolution from multiple repositories / multiple root folders:
# copybookSearch = search:${workspace}/?path=**/copybook/*.cpy 
#
# dependency resolution across all directories in build workspace, but filtering on the file extension cpy:
# copybookSearch = search:${workspace}/?path=**/*.cpy
# dependency resolution across all directories in build workspace, but filtering on the file extension cpy and cobcpy:
# copybookSearch = search:${workspace}/?path=**/*.cpy;**/*.cobcpy
#
# dependency resolution in the application directory and a shared common copybook location:
# copybookSearch = search:${workspace}/?path=${application}/copybook/*.cpy;/u/build/common/copybooks/*.cpy
# 
# More samples can be found at: https://www.ibm.com/docs/en/dbb/2.0.0?topic=apis-dependency-impact-resolution
#
copybookSearch = search:${workspace}/?path=${application}/copybook/*.cpy    

#
# bmsSearch
# searchPath to locate impacted bms maps
# used only in impact analysis
bmsSearch = search:${workspace}/?path=${application}/bms/*.bms

#
# linkSearch
#
# searchPath to locate impacted linkcards or main programs after an included submodule is changed
# leverages the output collection, which has the dependency info from the executable
# category LINK only; used only in impact analysis
# 
# Additional samples:
#
# impact resolution across all directories in build workspace, but filtering on the file extension cbl:
# staticLinkSearch = search:[:LINK]${workspace}/?path=**/*.cbl
#
# impact resolution across all directories in build workspace, but filtering on the file extension cbl and pli (for cobol and pli submodules):
# staticLinkSearch = search:[:LINK]${workspace}/?path=**/*.cbl,**/*.pli
#
# Special case with Dependency Scanner Transfer Control Statement capturing turned on (default is off)
# the scanners detect a static call to the literal, which would need to turn into a new rule for CALL:
# staticCallSearch = search:[:CALL]${workspace}/?path=${application}/cobol/*.cbl
#
linkSearch = search:[:LINK]${workspace}/?path=${application}/cobol/*.cbl         

