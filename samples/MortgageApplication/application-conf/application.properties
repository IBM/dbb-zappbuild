# Build properties used by zAppBuild/build.groovy

#
# Comma separated list of additional application property files to load
# Supports both relative path (to ${application}/application-conf/) and absolute path
applicationPropFiles=file.properties,BMS.properties,Cobol.properties,LinkEdit.properties

#
# Comma separated list all source directories included in application build. Supports both absolute 
# and relative paths.  Relative assumed to be relative to ${workspace}.
# ex: applicationSrcDirs=${application},/u/build/common/copybooks
applicationSrcDirs=${application}

#
# Comma separated list of the build script processing order
buildOrder=BMS.groovy,Cobol.groovy,LinkEdit.groovy

#
# The main build branch.  Used for cloning collections for topic branch builds instead
# of rescanning the entire application.
mainBuildBranch=main

#
# The git repository URL of the application repository to establish links to the changed files 
# in the build result properties 
# ex: GitHub: https://github.com/ibm/dbb-zappbuild/
gitRepositoryURL=https://github.com/ibm/dbb-zappbuild/

#
# exclude list used when scanning or running full build
excludeFileList=.*,**/.*,**/*.properties,**/*.xml,**/*.groovy,**/*.json,**/*.md,**/application-conf/*.*

#
# comma-separated list of file patterns for which impact calculation should be skipped. Uses glob file patterns
# sample: skipImpactCalculationList=**/epsmtout.cpy,**/centralCopybooks/*.cpy
skipImpactCalculationList=


#
# Build Property management
#
# zAppBuild is equipped to load build properties from individual property for a build file. 
# Typical use for using this capability is to overwrite compile or link options. And easily migrate
# them over from the previous build system.

# flag to enable the zAppBuild capability, default: false
loadFileLevelProperties=false

# relative path to folder containing individual property files
# assumed to be relative to ${workspace}/${application}
propertyFilePath=properties

# file extension for individual property files
# The property file is tried to be located via $buildFile.$propertyFileExtension, like epsmlist.cbl.properties
# default: properties
propertyFileExtension=properties

#
# Dependency Analysis and Impact Analysis configuration
#
# flag to define which DBB API is used for dependency and impact analysis
# 
#  false = uses the DependencyResolver and ImpactResolver APIs (default)
#          please note that DependencyResolver and ImpactResolver APIs are deprecated
#          configuration is based on the lang_resolutionRules and impactResolutionRules build properties
#  true  = leverages the DBB SearchPathDependencyResolver and SearchParthImpactFinder APIs introduced with DBB 1.1.2
#          configuration is based on the lang_dependencySearch and impactSearch build properties
useSearchConfiguration=false

#
# boolean flag to configure the SearchPathDependencyResolver to evaluate if resolved dependencies impact
#  the file flags isCICS, isSQL, isDLI, isMQ when creating the LogicalFile
# 
#  requires to use new APIs via useSearchConfiguration=true
#  default:false 
resolveSubsystems=false

#
# Impact analysis resolution rules (JSON format)
#  leverages the ImpactResolver API
# ** deprecated ** - see zAppBuild build property >impactSearch< 
impactResolutionRules=[${copybookRule},${bmsRule},${linkRule},${propertyRule}]

#
# Impact finder resolution search configuration
#  leverages the SearchPathImpactFinder API 
impactSearch=${copybookSearch}${bmsSearch}${linkSearch}

#
# Rule to locate Cobol copy books
# ** deprecated **
copybookRule = {"library": "SYSLIB", \
                  "searchPath": [ \
                    {"sourceDir": "${workspace}", "directory": "${application}/copybook"} \
                 ] \
               } 

#
# copybookSearch 
# searchPath to locate Cobol copybooks 
# used in dependency resolution and impact analysis
# 
# Please be as specific as possible when configuring the searchPath.
# Alternate configurations: 
#
# dependency resolution from multiple repositories / multiple root folders:
# copybookSearch = search:${workspace}/?path=**/copybook/*.cpy 
#
# dependency resolution across all directories in build workspace, but filtering on the file extension cpy:
# copybookSearch = search:${workspace}/?path=**/*.cpy
# dependency resolution across all directories in build workspace, but filtering on the file extension cpy and cobcpy:
# copybookSearch = search:${workspace}/?path=**/*.cpy;**/*.cobcpy
#
# dependency resolution in the application directory and a shared common copybook location:
# copybookSearch = search:${workspace}/?path=${application}/copybook/*.cpy;/u/build/common/copybooks/*.cpy
# 
# More samples can be found at: https://www.ibm.com/docs/en/adfz/dbb/1.1.0?topic=scripts-how-manage-build-dependencies
#
copybookSearch = search:${workspace}/?path=${application}/copybook/*.cpy    

#
# Rule to locate BMS maps
# ** deprecated ** 
bmsRule =   {"library": "SYSLIB", \
              "searchPath": [ \
                 {"sourceDir": "${workspace}", "directory": "${application}/bms"} \
              ] \
            } 

#
# bmsSearch
# searchPath to locate impacted bms maps
# used only in impact analysis
bmsSearch = search:${workspace}/?path=${application}/bms/*.bms

# Rule to locate COBOL programs and Link files for rebuilding statically linked load modules
# ** deprecated **  
linkRule =   {"category": "LINK", \
              "searchPath": [ \
                 {"sourceDir": "${workspace}", "directory": "${application}/cobol"}, \
                 {"sourceDir": "${workspace}", "directory": "${application}/link"} \
              ] \
            } 

#
# linkSearch
# searchPath to locate impacted programs or linkcards
# category LINK only; used only in impact analysis
linkSearch = search:[:LINK]${workspace}/?path=${application}/cobol/*.cbl;${application}/link/*.lnk           

# Rule to detect DBB Build property changes 
# ** deprecated ** 
propertyRule =   {"category": "PROPERTY"} 

